<!DOCTYPE html>
<html lang="en-US">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width"/>
    <title>Housesitter</title>
    <link href="/public/main.css" rel="stylesheet">
    <script>
      function openpanel(id) {
        const panel = document.querySelector("#panel");
        panel.classList.toggle("hidden")
        panel.querySelector(`#schedule-${id}`).scrollIntoView();
      }

      function toggleDeviceMode(id, event) {
        event.preventDefault();
        document.querySelector(`#${id}`).querySelectorAll('.card.hidden').forEach(c => c.classList.toggle("hidden"));
      }

      function requestPayloadFromForm(form) {
        const formData = new FormData(form);
        const {name, offtime, ontime, ...newScheduleValues} = Object.fromEntries(formData)

        const devices = Object.values(
          Object.entries(newScheduleValues)
            .filter(e => e[0].startsWith("device"))
            .reduce((memo, currentValue) => {
              const splits = currentValue[0].split("[").map(s => s.replace("]", ""))
              const deviceId = splits[1]
              const attribute = splits[2]
              memo[deviceId] = memo[deviceId] || {}
              memo[deviceId][attribute] = currentValue[1];
              return memo
            }, {})).filter(d => d.include);
        devices.forEach((d => {
          d.brightness = parseInt(d.brightness)
        }))

        return {name, offtime, ontime, devices};
      }

      function createSchedule(form, event) {
        event.preventDefault();
        let value = requestPayloadFromForm(form);
        fetch(`/api/schedules/`, {
          method: "POST",
          body: JSON.stringify(value)
        }).then(() => {
          location.reload()
        })
      }

      function updateSchedule(form, event) {
        event.preventDefault();
        const formData = new FormData(form);
        const newScheduleValues = Object.fromEntries(formData)
        const url = `/api/schedules/${newScheduleValues.id}`
        fetch(url, {
          method: "PUT",
          body: JSON.stringify(requestPayloadFromForm(form))
        }).then(() => {
          location.reload()
        })
      }

      function destroySchedule(id, name, event) {
        event.preventDefault();
        if(!window.confirm(`delete the schedule '${name}'?`)) {
          return
        }
        const url = `/api/schedules/${id}`
        fetch(url, {
          method: "DELETE",
        }).then(() => {
          location.reload()
        })
      }

      function pauseRunner(event) {
        event.preventDefault()
        postRunnerState(false)
      }

      function postRunnerState(shouldRun) {
        fetch("/api/runner", {
          method: "POST",
          body: JSON.stringify({
            run: shouldRun
          })
        }).then(() => {
          location.reload()
        })
      }

      function resumeRunner(event) {
        event.preventDefault()

        postRunnerState(true);
      }


    </script>
</head>
<body>

<header>
    <h1>
        Housesitter
    </h1>
    <aside>
        {{ if .IsRunnerRunning }}
            Running
                <label>
                    <button onclick="pauseRunner(event)">Pause</button>
                </label>
        {{ else }}
            Not Running
            <label>
                <button onclick="resumeRunner(event)">Run Schedule</button>
            </label>
        {{ end }}
    </aside>
</header>

<datalist id="markers">
    <option value="0"></option>
    <option value="25"></option>
    <option value="50">50</option>
    <option value="75"></option>
    <option value="100">100</option>
</datalist>
<section id="schedule-grid" class="chamfer">
    <article class="schedule-box">
        {{ range .Legends }}
            <div class="{{.DisplayClasses }}" {{.Style}}>
                {{ .Title }}
            </div>
        {{ end }}
        {{ range .Schedules }}
            <div style="grid-row-start:calc({{.Row }} + 1)">
                <div>{{.FriendlyName}}</div>
                <div>
                    {{range .Devices}}
                        <span title="{{.FriendlyName}}"
                              style="display: inline-block; height: 5px; width: 5px; padding: 5px; background-color: {{.Color}}; border: 1px solid gray">

                        </span>
                    {{end}}
                </div>
            </div>
            <div class="label chamfer" onclick="openpanel({{.ID}})"
                    {{ .InlineStyles }}
            >
                {{ .FormattedTime }}
            </div>
        {{ end }}
        <div style="grid-row-start:calc({{ .Schedules | len }} + 2); grid-column-start: tick 1; grid-column-end: tick 48;">
            <button class="chamfer" style="width: 100%" onclick="openpanel('new')">Create New Schedule</button>
        </div>
    </article>
</section>
<article id="panel" class="hidden">
    {{ range .Schedules }}
        {{ $scheduleID := .ID }}
        <section class="card" id="schedule-{{.ID}}">
            <header>
                <h2>{{.FriendlyName}}</h2>
                <sub>schedule</sub>
                <button onclick="destroySchedule('{{.ID}}', '{{.FriendlyName}}', event)">Delete</button>
            </header>
            <article>
                <form onsubmit="updateSchedule(this, event)" >
                    <section class="form-oneline">
                        <input type="hidden" name="id" value="{{.ID}}">
                        <input type="hidden" name="name" value="{{.FriendlyName}}">
                        <label>On Time
                            <input type="time" name="ontime" step="60" value="{{.OnTime.HTMLValue}}">
                        </label>
                        <label>Off Time
                            <input type="time" step="60" name="offtime" value="{{.OffTime.HTMLValue}}">
                        </label>
                        <button class="chamfer" type="submit">Update</button>
                    </section>
                    <section>
                        <header>
                            Devices on this Schedule
                        </header>
                        <article class="flex">
                            {{ range .Devices}}
                                <section id="schedule-{{$scheduleID}}-device-{{.ID}}"
                                         class="chamfer card {{.DisplayClasses}}">
                                    {{template "device" .}}
                                </section>
                            {{ end }}
                        </article>
                        <button onclick="toggleDeviceMode('schedule-{{.ID}}', event)">Show All Devices</button>
                        <article class="flex">
                            {{ range .AvailableDevices }}
                                <section id="schedule-{{$scheduleID}}-device-{{.ID}}"
                                         class="chamfer card {{.DisplayClasses}}">
                                    {{template "device" .}}
                                </section>
                            {{ end }}
                        </article>
                    </section>
                </form>
            </article>
        </section>
    {{ end }}
    <section class="card" id="schedule-new">
        <form onsubmit="createSchedule(this, event)">
            <header>
                <h2>New Schedule</h2>
                <sub>schedule</sub>
            </header>
            <article>
                <section class="form-oneline">
                    <label>Name
                        <input type="text" name="name"></h2>
                    </label>
                    <label>On Time
                        <input type="time" name="ontime" step="60" value="09:00">
                    </label>
                    <label>Off Time
                        <input type="time" step="60" name="offtime" value="14:00">
                    </label>
                    <button type="submit" class="chamfer">Create</button>
                </section>
                <section>
                    <article class="flex">
                        {{ range .AllDevices }}
                            <section id="schedule-new-device-{{.ID}}" class="chamfer card">
                                {{template "device" .CreateEmptyDeviceSettings }}
                            </section>
                        {{ end }}
                    </article>
                </section>
            </article>
        </form>
    </section>
</article>
</body>
</html>
